1. Launch the AWS instance with an Ubuntu image and select HTTP port to be open & key pair.

2. Launch the terminal on the local machine & run SSH command to connect to the EC2 instance.

$ ssh -i "keypair.pem" ubuntu@instance_public_ip

3. Install Docker:

sql
Copy code
$ sudo apt-get update
$ sudo apt-get install docker.io -y
4. Install & start MySQL Container

css
Copy code
$ sudo docker run -d --name mysqlcontainer -e MYSQL_ROOT_PASSWORD=pass@123 -e MYSQL_DATABASE=wordpressdb mysql:latest
Explanation:

"-e MYSQL_ROOT_PASSWORD=Pass@123": Make sure the password complies with MySQL's password policy, which typically requires a mix of uppercase, lowercase, digits, and special characters.
5. Install & Start WordPress Container:

ruby
Copy code
$ sudo docker run -d -p 80:80 --name wordpresscontainer -e WORDPRESS_DB_HOST=mysqlcontainer -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=pass@123 -e WORDPRESS_DB_NAME=wordpressdb wordpress:latest
Explanation:

"-e WORDPRESS_DB_PASSWORD=Pass@123": Same as above, ensure compliance with MySQL's password policy.
6. Check for installed Docker MySQL & WordPress images:

ruby
Copy code
$ sudo docker images
7. Check for running Docker MySQL & WordPress containers:

ruby
Copy code
$ sudo docker ps
8. Additional Tip:

If you're seeing "", instead of the WordPress initial screen, it indicates that both the MySQL and WordPress containers are on the same Docker network. You can create a custom Docker network and attach both containers to it:

ruby
Copy code
$ docker network create custom-network
$ docker network connect custom-network mysqlcontainer
$ docker network connect custom-network wordpresscontainer
Conclusion:

This setup guide provides a straightforward process for deploying WordPress containers on Docker in an AWS Ubuntu instance. Ensure passwords meet security standards and consider further optimizations such as Docker Compose for managing multi-container environments.
